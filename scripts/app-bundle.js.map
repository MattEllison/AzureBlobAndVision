{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/Models/Picture.ts","src/Models/VisionResponse.ts","src/resources/index.ts","src/resources/service/visionapi.ts","src/resources/service/blobStorage.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { BloblStorage } from './resources/service/blobStorage';\nimport { Picture } from './Models/Picture';\nimport { VisionResponse } from './Models/VisionResponse';\nimport { VisionApi } from './resources/service/visionapi';\n\n//import { StorageServiceClient } from '~azure-storage/lib/common/common';\n//import { createBlobServiceAnonymous } from \"azure-storage\";\n\n\nimport { HttpClient } from \"aurelia-http-client\";\n\nexport class App {\n  blobStorage: BloblStorage;\n  message = 'Hello World!';\n  files;\n  //blobUrl = \"https://catstorageorix.blob.core.windows.net/temp/small-kitten-meowing2.jpg?sv=2017-04-17&ss=bfqt&srt=sco&sp=rwdlacup&se=2017-11-04T20:50:05Z&st=2017-11-04T12:50:05Z&spr=https&sig=mdbAJAV5j9l7h3Fa1nP1Nl%2Bu1f6uwGDv1GidxPCxdfo%3D\";\n  pictures: Array<Picture> = new Array<Picture>();\n  visionAPI: VisionApi;\n  constructor() {\n    this.visionAPI = new VisionApi();\n    this.blobStorage = new BloblStorage();\n    this.blobStorage\n      .GetPictures()\n      .then((pictures) => {\n        console.log(\"Got pics\", pictures)\n        pictures.forEach(picture => {\n          this.blobStorage.GetBlobCaption(picture.filename).then(caption => {\n            picture.caption = caption;\n            this.pictures.push(picture);\n          });\n        });\n\n\n      });\n  }\n\n  NewName() {\n    return `https://catstorageorix.blob.core.windows.net/temp/${this.files[0].name}?sv=2017-04-17&ss=bfqt&srt=sco&sp=rwdlacup&se=2017-11-04T20:50:05Z&st=2017-11-04T12:50:05Z&spr=https&sig=mdbAJAV5j9l7h3Fa1nP1Nl%2Bu1f6uwGDv1GidxPCxdfo%3D`;\n  }\n\n  MetaDataHeader() {\n    return `https://catstorageorix.blob.core.windows.net/temp/`\n  }\n\n  Submit() {\n\n    this.blobStorage.SavePicture(this.files[0])\n      .then((picture) => {\n        let url = `https://catstorageorix.blob.core.windows.net/temp/${picture.filename}`;\n        this.visionAPI.processImage(url).then((result: VisionResponse) => {\n          picture.caption = result.caption;\n          this.blobStorage.updateMetaDataForPicture(picture)\n            .then((picture: Picture) => {\n              this.pictures.push(picture);\n            });\n        })\n\n\n      });\n\n    // let client = new HttpClient().configure(x => {\n    //   x.withHeader('x-ms-blob-type', 'BlockBlob');\n    // });\n\n    // client.put(this.NewName(), this.files[0])\n    //   .then(data => {\n    //     let url = `https://catstorageorix.blob.core.windows.net/temp/${this.files[0].name}`;\n    //     this.visionAPI.processImage(url).then((result: Picture) => {\n    //       result.filename = this.files[0].name;\n    //       this.blobStorage.updateMetaDataForPicture(result);\n\n    //       // console.log(\"Vision response\", result)\n    //       // client.createRequest(`${url}?comp=metadata`)\n    //       //   .withHeader('x-ms-meta-caption', result.caption)\n    //       //   .asPut()\n    //       //   .send();\n    //     });\n\n    //     this.blobStorage.GetPictures().then((result) => {\n    //       this.pictures = result;\n    //     });\n    //   });\n\n\n\n\n\n\n\n    console.log(\"Submitted Again\");\n\n\n\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","  \r\n\r\nexport class Picture {\r\n    filename: any;\r\n    caption: string;\r\n    name;\r\n    url;\r\n\r\n}","\r\n\r\nexport class VisionResponse {\r\n    constructor(response) {\r\n        this.caption = response.description.captions[0].text;\r\n        this.name = this.caption = response.description.captions[0].text;\r\n    }\r\n    caption: string;\r\n    name;\r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import { Picture } from './../../Models/Picture';\r\nimport { VisionResponse } from './../../Models/VisionResponse';\r\nimport { HttpClient } from \"aurelia-http-client\";\r\n\r\nexport class VisionApi {\r\n    httpClient;\r\n    subscriptionKey = \"311f1c6de3f946e68713e6ca28c580d7\";\r\n    constructor() {\r\n\r\n        this.httpClient = new HttpClient().configure(x => {\r\n            x.withHeader('Ocp-Apim-Subscription-Key', this.subscriptionKey);\r\n        });\r\n    }\r\n    processImage(imageURL) {\r\n        console.log(\"Processing image\", imageURL);\r\n        var uriBase = \"https://westcentralus.api.cognitive.microsoft.com/vision/v1.0/analyze?visualFeatures=description\";\r\n\r\n        return this.httpClient.post(uriBase, {\r\n            url: imageURL\r\n        }).then((result) => {\r\n            console.log(\"I did get a result\", result);\r\n            return new VisionResponse(JSON.parse(result.response));\r\n        })\r\n    }\r\n\r\n    updateMetaDataForPicture(image: Picture) {\r\n        console.log(\"Vision response\", image)\r\n        this.httpClient.createRequest(`${image.url}?comp=metadata`)\r\n            .withHeader('x-ms-meta-caption', image.caption)\r\n            .asPut()\r\n            .send();\r\n    }\r\n\r\n}","import { Picture } from './../../Models/Picture';\r\nimport { HttpClient } from 'aurelia-http-client';\r\n\r\nexport class BloblStorage {\r\n    pictureContainer = \"https://catstorageorix.blob.core.windows.net/temp\";\r\n    sharedKeyInfo = \"sv=2017-04-17&ss=bfqt&srt=sco&sp=rwdlacup&se=2017-11-24T20:50:05Z&st=2017-11-04T12:50:05Z&spr=https&sig=lTzCFbApWqiRXlCJ6RHSim9BP2GsYMucxtVGxssxfWg%3D\";\r\n\r\n    SavePicture(file) {\r\n\r\n        let client = new HttpClient().configure(x => {\r\n            x.withHeader('x-ms-blob-type', 'BlockBlob');\r\n        });\r\n\r\n        return client.put(`${this.pictureContainer}/${file.name}?${this.sharedKeyInfo}`, file).then((response) => {\r\n            let newPic = new Picture();\r\n            newPic.filename = file.name;\r\n            newPic.url = `${this.pictureContainer}/${file.name}`;\r\n            return newPic;\r\n        })\r\n    }\r\n\r\n    updateMetaDataForPicture(image: Picture) {\r\n        console.log(\"Meta data update\", image);\r\n        let client = new HttpClient().configure(x => {\r\n            x.withHeader('x-ms-blob-type', 'BlockBlob');\r\n        });\r\n\r\n        console.log(\"Vision response\", image)\r\n        return client.createRequest(`${this.pictureContainer}/${image.filename}?comp=metadata&${this.sharedKeyInfo}`)\r\n            .withHeader('x-ms-meta-caption', image.caption)\r\n            .asPut()\r\n            .send()\r\n            .then(() => image);\r\n    }\r\n\r\n\r\n\r\n    GetPictures() {\r\n        \r\n        let client = new HttpClient().configure(x => {\r\n            //        ajaxRequest.setRequestHeader('x-ms-blob-type', 'BlockBlob');\r\n            x.withHeader('Content-Type', 'application/json');\r\n        });\r\n\r\n\r\n        let url = `${this.pictureContainer}?restype=container&comp=list&${this.sharedKeyInfo}`\r\n        console.log(\"Container Emails\",url);\r\n        return client.get(url).then((result) => {\r\n            let pictures = new Array<Picture>();\r\n            console.log(\"Getting Pics\", result);\r\n            var oParser = new DOMParser();\r\n            var oDOM = oParser.parseFromString(result.response, \"text/xml\");\r\n            console.log(oDOM);\r\n            var blobs = oDOM.getElementsByTagName(\"Blob\")\r\n            for (var index = 0; index < blobs.length; index++) {\r\n                console.log(\"Blob\",blobs[index]);\r\n                let name = blobs[index].getElementsByTagName(\"Name\")[0].innerHTML;\r\n\r\n\r\n                let newResult = new Picture();\r\n                newResult.caption = name;\r\n                newResult.name = name;\r\n                newResult.url = `${this.pictureContainer}/${name}`;\r\n                newResult.filename = name;\r\n                pictures.push(newResult);\r\n\r\n            }\r\n            return pictures;\r\n\r\n\r\n        })\r\n    }\r\n\r\n    GetBlobCaption(filename) {\r\n        let client = new HttpClient();\r\n        console.log(\"Blob url \", `${this.pictureContainer}/${filename}?${this.sharedKeyInfo}`);\r\n        return client.get(`${this.pictureContainer}/${filename}?${this.sharedKeyInfo}`).then((result) => {\r\n            return result.headers['headers']['x-ms-meta-caption'].value;\r\n        })\r\n    }\r\n}"],"sourceRoot":".."}